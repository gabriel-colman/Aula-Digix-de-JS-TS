📌 Por que usar React no seu caso específico?
Atualmente você possui uma API REST bem definida em ASP.NET Core, com rotas prontas e autenticação JWT implementada. O front-end existente está feito com HTML, CSS e JavaScript puro, o que torna difícil gerenciar páginas e interações mais complexas, reaproveitar código e garantir a manutenção conforme o projeto cresce.

Utilizando React, você ganha:

✅ Componentização: Reutilização fácil dos componentes visuais e lógicos.

✅ Gerenciamento de Estado: React facilita muito lidar com dados dinâmicos.

✅ Facilidade em integração com APIs: React tem diversas ferramentas para consumo de APIs REST.

✅ Ecossistema amplo: Acesso a muitas bibliotecas prontas para autenticação, formulários, validação, rotas, etc.

✅ Melhor escalabilidade e manutenção: Código organizado, modular e fácil de manter.
🚀 Passos para criar o projeto React
🔹 Passo 1 - Criar projeto React
Em terminal/prompt, execute:
O nome do projeto esta totalmente minusculo, porque o React não aceita letras maiúsculas no nome do projeto.
Comando: npx create-react-app sistemaescolarfront
Comando para instalar o pacote Dom: npm install react-router-dom
Comando para instalar o pacote Axios: npm install axios

A estrutura de pastas do projeto React será criada automaticamente. Você verá algo assim:
```
sistemaescolarfront
├── node_modules
├── public
│   ├── favicon.ico
│   ├── index.html
│   ├── logo192.png
│   ├── logo512.png
│   ├── manifest.json
│   └── robots.txt
├── src
│   ├── App.css
│   ├── App.js
│   ├── App.test.js
│   ├── App.tsx
│   ├── index.css
│   ├── index.js
│   ├── logo.svg
│   ├── reportWebVitals.js
│   ├── setupTests.js
│   └── vite-env.d.ts
├── .gitignore
├── package.json
├── README.md
├── tsconfig.json
├── tsconfig.tsbuildinfo
├── vite.config.js
└── yarn-error.log
```
O que cada pasta faz:
- node_modules: Pasta onde ficam as dependências do projeto, instaladas pelo npm ou yarn.
- public: Pasta onde ficam os arquivos públicos do projeto, como o index.html e ícones.
- src: Pasta onde ficam os arquivos de código-fonte do projeto. Aqui você vai criar seus componentes, páginas e lógica do React.
- .gitignore: Arquivo que informa quais arquivos/pastas devem ser ignorados pelo Git.
- package.json: Arquivo que contém as dependências do projeto e scripts para rodar o React.
- README.md: Arquivo de documentação do projeto.
- tsconfig.json: Arquivo de configuração do TypeScript, caso você opte por usar TypeScript no projeto.
- vite.config.js: Arquivo de configuração do Vite, que é o bundler usado pelo Create React App.
- yarn-error.log: Arquivo de log de erros do Yarn, caso você use o Yarn como gerenciador de pacotes.

📌 Arquivos da estrutura React detalhados:

📁 public/
📄 **index.html**
**Função:** Arquivo HTML principal, onde React injeta toda a aplicação.

**Detalhes:**
- Possui uma `<div id="root"></div>` onde todo conteúdo React será renderizado.
- Meta tags essenciais para otimização e visualização correta em dispositivos móveis.
- Referências especiais (`%PUBLIC_URL%`) que React substitui na hora da compilação para localizar arquivos estáticos como ícones e manifestos.

📄 **manifest.json**
**Função:** Define como sua aplicação web será exibida quando instalada como uma Progressive Web App (PWA).

**Detalhes:**
- Inclui ícones para diferentes resoluções.
- Define como o aplicativo é exibido ao ser instalado em dispositivos móveis e desktops (cores, nome, ícones).

📁 src/
📄 **index.js**
**Função:** Arquivo inicial do React, responsável por renderizar o componente principal (`App`) no HTML.

**Detalhes:**
- Renderiza o componente `<App />` dentro do elemento HTML com `id="root"`.
- Usa `React.StrictMode` para detectar práticas inseguras durante o desenvolvimento.
- Chama `reportWebVitals()` para medir performance (opcional).

📄 **index.css**
**Função:** Estilos globais padrão da aplicação.

**Detalhes:**
- Define fontes e configurações gerais do corpo (`body`) e elementos padrão (`code`).

📄 **App.js**
**Função:** Componente React principal da aplicação.

**Detalhes:**
- Contém JSX (JavaScript XML) que define o visual inicial da página.
- Exibe logotipo e link padrão para documentação React.
- Será o componente inicial onde você começará a construir sua aplicação.

📄 **App.css**
**Função:** Estilos específicos do componente `App.js`.

**Detalhes:**
- Define estilos visuais específicos como layout, cores, animações e comportamento responsivo.

📄 **App.test.js**
**Função:** Teste automatizado básico para o componente `App`.

**Detalhes:**
- Utiliza Jest e React Testing Library para garantir que elementos como o link "learn react" estejam sempre presentes ao renderizar o `App`.

📄 **reportWebVitals.js**
**Função:** Ferramenta opcional que mede desempenho da aplicação React (Web Vitals).

**Detalhes:**
- Analisa métricas essenciais como velocidade e performance da aplicação (CLS, FID, LCP, TTFB, FCP).
- Ajuda no monitoramento e otimização contínua da performance.

📄 **setupTests.js**
**Função:** Arquivo que configura testes iniciais com Jest.

**Detalhes:**
- Importa `@testing-library/jest-dom` para fornecer métodos adicionais de teste, como validação fácil do DOM em testes automatizados.

📌 **Resumo simplificado dos arquivos principais:**

| **Arquivo**       | **Função Principal**                              |
|--------------------|--------------------------------------------------|
| `index.html`       | Estrutura HTML base para React                   |
| `manifest.json`    | Configuração de instalação da app                |
| `index.js`         | Renderiza aplicação React no DOM                 |
| `index.css`        | Estilos globais                                  |
| `App.js`           | Componente React principal                       |
| `App.css`          | Estilos específicos do App                       |
| `App.test.js`      | Testes automatizados para App                    |
| `reportWebVitals.js` | Performance da aplicação                       |
| `setupTests.js`    | Configuração inicial dos testes Jest             |

📝 **Por que esses arquivos são importantes no seu contexto?**
- **index.js** é o ponto de entrada, ótimo para explicar como React inicializa a aplicação.
- **App.js** será o primeiro contato com componentes React, facilitando a compreensão da modularização.
- Arquivos como `reportWebVitals.js` e `setupTests.js` demonstram a importância de boas práticas em testes e monitoramento de performance, aspectos essenciais do desenvolvimento profissional.
- **index.css** e **App.css** fornecem uma base prática para ensinar como estruturar CSS modularizado e global no React.

🗑️ **Arquivos que você deve remover:**
Estes arquivos fazem parte do projeto inicial gerado pelo React e não serão necessários quando aplicar o front-end personalizado do seu projeto escolar:

**Dentro de `src/`:**
- `App.test.js` (Testes padrão iniciais do React)
- `reportWebVitals.js` (Performance WebVitals, não obrigatório no seu contexto)
- `setupTests.js` (Configuração de testes Jest padrão)

**Dentro de `public/`:**
- Pode remover arquivos padrões como `logo192.png`, `logo512.png` se não forem usados.

Esses arquivos são criados automaticamente, porém não fazem parte do contexto específico do seu sistema escolar.

✅ **Arquivos essenciais para manter:**
Estes arquivos são essenciais para que sua aplicação React continue funcionando corretamente:

**Dentro de `public/`:**
- `index.html` (Essencial para React renderizar conteúdo)
- `manifest.json` (Opcional, mas recomendado se for utilizar PWA)




🔹 Passo 2 - Rodar o projeto React
No terminal/prompt, dentro da pasta do projeto, execute:
Comando: npm start
ou yarn start
